Reg exp language



Construct Matches 
  
Characters 
`x`                x The character x 
octal(nnn)         \0n The character with octal value 0n (0 <= n <= 7) 

                   \0nn The character with octal value 0nn (0 <= n <= 7) 
                   \0mnn The character with octal value 0mnn (0 <= m <= 3, 0 <= n <= 7) 
hex(0xhh)          \xhh The character with hexadecimal value 0xhh 
                   \uhhhh The character with hexadecimal value 0xhhhh 
hex(0xhh, 0xhh)    \x{h...h} The character with hexadecimal value 0xh...h (Character.MIN_CODE_POINT  <= 0xh...h <=  Character.MAX_CODE_POINT) 
tab                \t The tab character ('\u0009') 
newline            \n The newline (line feed) character ('\u000A') 
return             \r The carriage-return character ('\u000D') 
formfeed           \f The form-feed character ('\u000C') 
bell               \a The alert (bell) character ('\u0007') 
escape             \e The escape character ('\u001B') 
ctrl(x)            \cx The control character corresponding to x 
tick               backtick character `
  
Character classes 
either(`a`, `b`, `c`)  [abc] a, b, or c (simple class) 
not(`a`, `b`, `c`)     [^abc] Any character except a, b, or c (negation) 
range(`a`:`z`, `A`:`Z`)      [a-zA-Z] a through z or A through Z, inclusive (range) 
union(r1, r2)      [a-d[m-p]] a through d, or m through p: [a-dm-p] (union) 
intersect(r1, r2)  [a-z&&[def]] d, e, or f (intersection) 
                   [a-z&&[^bc]] a through z, except for b and c: [ad-z] (subtraction) 
                   [a-z&&[^m-p]] a through z, and not m through p: [a-lq-z](subtraction) 
  
Predefined character classes 
wild               . Any character (may or may not match line terminators) 
digit              \d A digit: [0-9] 
nondigit           \D A non-digit: [^0-9] 
whitehoriz         \h A horizontal whitespace character: [ \t\xA0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000] 
whitenonhoriz      \H A non-horizontal whitespace character: [^\h] 
whitespace         \s A whitespace character: [ \t\n\x0B\f\r] 
nonwhitespace      \S A non-whitespace character: [^\s] 
vertwhitespace      \v A vertical whitespace character: [\n\x0B\f\r\x85\u2028\u2029]  
vertnonwhitespace  \V A non-vertical whitespace character: [^\v] 
wordchar           \w A word character: [a-zA-Z_0-9] 
nonwordchar         \W A non-word character: [^\w] 
  
POSIX character classes (US-ASCII only) 
lower              \p{Lower} A lower-case alphabetic character: [a-z] 
upper              \p{Upper} An upper-case alphabetic character:[A-Z] 
ascii              \p{ASCII} All ASCII:[\x00-\x7F] 
alphabetic         \p{Alpha} An alphabetic character:[\p{Lower}\p{Upper}] 
decimal            \p{Digit} A decimal digit: [0-9] 
alphanumeric       \p{Alnum} An alphanumeric character:[\p{Alpha}\p{Digit}] 
punct              \p{Punct} Punctuation: One of !"#$%&'  *+,-./:;<=>?@[\]^_`{|}
visible            \p{Graph} A visible character: [\p{Alnum}\p{Punct}] 
printable          \p{Print} A printable character: [\p{Graph}\x20] 
blank              \p{Blank} A space or a tab: [ \t] 
control            \p{Cntrl} A control character: [\x00-\x1F\x7F] 
hexdigit           \p{XDigit} A hexadecimal digit: [0-9a-fA-F] 
space              \p{Space} A whitespace character: [ \t\n\x0B\f\r] 
  
  
Classes for Unicode scripts, blocks, categories and binary properties 
latin              \p{IsLatin} A Latin script character (script) 
greek              \p{InGreek} A character in the Greek block (block) 
upperletter        \p{Lu} An uppercase letter (category) 
alphabetic         \p{IsAlphabetic} An alphabetic character (binary property) 
currency           \p{Sc} A currency symbol 
nongreek           \P{InGreek} Any character except one in the Greek block (negation) 
nonupper           [\p{L}&&[^\p{Lu}]] Any letter except an uppercase letter (subtraction) 
  
Boundary matchers 
bol                ^ The beginning of a line 
eol                 $ The end of a line 
wordboundary       \b A word boundary 
nonwordboundy      \B A non-word boundary 
begininput         \A The beginning of the input 
endmatch           \G The end of the previous match 
endinputexcept     \Z The end of the input but for the final terminator, if any 
endinput           \z The end of the input 
  
Linebreak matcher 
linebreak           \R Any Unicode linebreak sequence, is equivalent to \u000D\u000A|[\u000A\u000B\u000C\u000D\u0085\u2028\u2029]  
  
Greedy quantifiers 
optional(x)        X? X, once or not at all 
any(x)             X* X, zero or more times 
some(x)            X+ X, one or more times 
exactly(x, n)      X{n} X, exactly n times 
atleast(x, n)      X{n,} X, at least n times 
atleast(x, n, m)   X{n,m} X, at least n but not more than m times 
  
Reluctant quantifiers 
optional(x, reluct)         X?? X, once or not at all 
any(x, rel)          	X*? X, zero or more times 
some(x, rel)      		X+? X, one or more times 
exactly(x, n, rel)   	X{n}? X, exactly n times 
atleast(x, n, rel)   	X{n,}? X, at least n times 
atleast(x, n, m, rel) X{n,m}? X, at least n but not more than m times 
  
Possessive quantifiers 
optional(x, posses)         X?+ X, once or not at all 
any(x, pos)          	X*+ X, zero or more times 
some(x, pos)      		X++ X, one or more times 
exactly(x, n, pos)   	X{n}+ X, exactly n times 
atleast(x, n, pos)   	X{n,}+ X, at least n times 
atleast(x, n, m, pos)  X{n,m}+ X, at least n but not more than m times 
  
Logical operators 
x y                 XY X followed by Y 
x or y              X|Y Either X or Y 
capture(x)          (X) X, as a capturing group
capture(x, "name")  (?<name>X) X, as a named-capturing group
  
Back references 
group(n)            \n Whatever the nth capturing group matched 
group("name")       \k<name> Whatever the named-capturing group "name" matched 
  
Quotation 
                    \ Nothing, but quotes the following character 
                    \Q Nothing, but quotes all characters until \E 
                    \E Nothing, but ends quoting started by \Q 
  
Special constructs (named-capturing and non-capturing) 
                    (?<name>X) X, as a named-capturing group 
                    (?:X) X, as a non-capturing group 
                    (?idmsuxU-idmsuxU)  Nothing, but turns match flags i d m s u x U on - off 
                    (?idmsux-idmsux:X)   X, as a non-capturing group with the given flags i d m s u x on - off 
                    (?=X) X, via zero-width positive lookahead 
                    (?!X) X, via zero-width negative lookahead 
                    (?<=X) X, via zero-width positive lookbehind 
                    (?<!X) X, via zero-width negative lookbehind 
                    (?>X) X, as an independent, non-capturing group 
                    
anyspace         any(space)
somespaces       some(space)
caseins(x)       X|x
                    
Examples

bol capture( somespaces `cat` somespaces ) eol ->   ^( +cat +)$
caseins(`F`) `red`                                  ->   F|fred 
`F` or `f` `red`                                    ->   F|fred
some(digit)                                         ->   [0-9]+
some(range(`0`:`9`))                                ->   [0-9]+

